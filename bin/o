#!/usr/bin/env python3

import os
import platform
import re
import shutil
import subprocess
import sys
import webbrowser


def resolve_path(path):
    # Can't transform absolute paths.
    if re.match(r'[a-zA-Z]:[/\\]|/', path):
        return path if os.path.exists(path) else None
    # Look for relative paths in every parent directory.
    directory = os.getcwd()
    while True:
        if os.path.exists(os.path.join(directory, path)):
            return os.path.join(directory, path)
        if os.path.isdir(os.path.join(directory, '.git')):
            try:
                proc = subprocess.Popen([
                    'git', '-c', 'core.quotepath=false', 'ls-files'
                ], stdout=subprocess.PIPE)
                for line in iter(proc.stdout.readline, b''):
                    git_file_path = line.rstrip(b'\n').decode()
                    if re.match(r'(^|[\\/])%s$' % path, git_file_path):
                        return os.path.join(directory, git_file_path)
            except subprocess.CalledProcessError:
                pass
        parent = os.path.dirname(directory)
        if parent == directory:
            break  # Can't go above the root directory.
        directory = parent
    # Strip '../' from beginning of path if necessary.
    if re.match(r'^..[\\/]', path):
        return resolve_path(path[3:])
    return None


def canonicalize_path(path):
    # I'm not sure why this needs to be called twice, but it does.
    # In MSYS2 on Windows 7, with a symlink from /home/John/Code to
    # /c/Users/John/Code, calling os.path.realpath('bin') whilst the current
    # directory is /home/John/Code/scripts returns /home/John/Code/scripts/bin
    # and you have to call os.path.realpath('/home/John/Code/scripts/bin') to
    # get /c/Users/John/Code/scripts/bin as expected.
    return os.path.realpath(os.path.realpath(path))


def native_open(path):
    try:
        os.startfile(path)
        return
    except AttributeError:
        pass
    for cmd in ['xdg-open', 'open', 'start']:
        if shutil.which(cmd):
            subprocess.Popen([cmd, path])
            return


def open_editor(path, line_col):
    if sys.platform == 'msys' and line_col:
        # This script is running inside MSYS (a posix environment on Windows).
        # |path| will be something like /c/Users/John/foo.txt and normally when
        # a program within MSYS runs a program outside MSYS (like subl), any
        # arguments that are recognized as MSYS absolute paths will be converted
        # to Windows absolute paths -- i.e. C:/Users/John/foo.txt -- but this
        # automatic conversion fails if the path has a trailing :line or
        # :line:col. So instead we force the path to be converted by passing it
        # as an argument to a program that echoes it back!
        echo = os.path.join(os.path.dirname(__file__), '..', 'echo_param.bat')
        path = subprocess.check_output([echo, path]) \
                         .decode().strip().replace('/', '\\')
    sys.exit(subprocess.call(['subl', path + line_col]))


def open_file(path, line_col):
    # html isn't really binary, but it's often useful to view it.
    safe_binaries = \
        r'\.(?:zip|jar|tar\.gz|tgz|7z|pdf|jpe?g|png|gif|bmp|tiff?|xcf)$'
    if re.search(safe_binaries, path):
        native_open(path)
    else:
        open_editor(path, line_col)


if __name__ == '__main__':
    if len(sys.argv) <= 1 or re.match(r'(?:-h|--help|\/\?)$', sys.argv[1]):
        raise ("USAGE:\n"
               "    o path/to/file:line:col (trailing garbage ignored)\n"
               "    o path/to/folder"
               "    o http://foo.com")
    m = re.match(r'(https?://\S+)'  # URL with scheme
                 r'|([^:].?[^:]*)'  # path, or schemeless URL
                     r'((?::[0-9]+){0,2})',  # linecol
                 ' '.join(sys.argv[1:]))
    if m.group(1):
        webbrowser.open_new_tab(m.group(1))
    elif m.group(2):
        fixed_path = resolve_path(m.group(2))
        if fixed_path is not None:
            fixed_path = canonicalize_path(fixed_path)
            if os.path.isfile(fixed_path):
                open_file(fixed_path, m.group(3))
            elif os.path.isdir(fixed_path):
                native_open(fixed_path)
            else:
                print("Found %s, but it's not a file or directory" % fixed_path,
                      file=sys.stderr)
                sys.exit(1)
        elif re.match(r'\w+\.\w+($|/)', m.group(2)):
            # Hope this is a URL
            webbrowser.open_new_tab('https://' + m.group(2) + m.group(3))
        else:
            print("Couldn't parse as file or URL", file=sys.stderr)
            sys.exit(1)
